\documentclass[10pt,a4paper]{article}
\usepackage[paper=a4paper,hmargin=0.5cm,bottom=1.5cm]{geometry}
\usepackage[utf8]{inputenc}
\usepackage[spanish]{babel}
\usepackage{xargs}
\usepackage{xspace}
\usepackage{caratula}
\usepackage{ifthen}
\usepackage{aed2-tad,aed2-symb,aed2-itef,aed2-diseno}
\usepackage{aed2-tad,aed2-symb,aed2-itef}
\usepackage{algorithmicx, algpseudocode, algorithm}
\usepackage{graphicx}


\materia{Algoritmos y Estructuras de Datos II}
\titulo{Examen Final}
\subtitulo{1 de marzo 2023}
\integrante{Ezequiel Rueda Sanchez}{522/16}{ezequiel.ruedasanchez@gmail.com}


\begin{document}


\maketitle

\section{Ejercicio 1}

Determine los problemas de axiomatizar otras operaciones sobre generadores. Dar un ejemplo de una operación que rompa la congruencia y otro que no.
\newline
\newline
\textbf{Resolucion}
\newline
\newline
Generalmente, evitamos axiomatizar otras operaciones sobre generadores para evitar que una funcion que aparezca en esta seccion devuelva valores que rompan con la $congruencia$ del TAD. Para ello, elegimos axiomatizar otras operaciones sobre los observadores basicos ya que estos deben permitirnos distinguir todas las instancias. 
\newline
\newline
Ahora vamos a ver el caso donde una operacion rompe la congruencia. Supongamos que tenemos el siguiente TAD.
\newline
\begin{tad}{\tadNombre{Negocio}}
	\medskip	
	\tadObservadores
	\medskip
	\tadOperacion{totalVendido}{negocio}{nat}{}
	\medskip
	\medskip
	
	\tadGeneradores
	\medskip
	\tadOperacion{inugurar}{}{negocio}{}
	\medskip
	\tadOperacion{vender}{negocio, producto}{negocio}{}
	\medskip
	
	\tadOtrasOperaciones
	\medskip
	\tadOperacion{ventas}{negocio}{secu(producto)}{}
\end{tad}
\medskip
De acuerdo con esta especificacion, dos negocios van a ser iguales si el total vendido es el mismo pero podria suceder que el detalle de las ventas difieran.
\newline
\newline
Entonces, la funcion \TipoVariable{ventas()} rompe la congruencia, es decir, diferencia elementos que quedan en la misma clase de equivalencia de acuerdo a la igualdad observacional. Por lo tanto, para la etapa de modelado, o bien desaparece la funcion \TipoVariable{ventas()} de otras operaciones o se convierte en observador basico y por ende, en miembro de la igualdad observacional. Si no hacemos esto, se genera una $inconsistencia$, es decir, hay instancias del TAD \tadNombre{Negocio} que son equivalentes segun los observadores basicos pero que son diferenciables de acuerdo a los axiomas efectivamente escritos.
\newpage

\section{Ejercicio 2}

Explicar el invariante de un B-tree. Determinar por qué queremos árboles balanceados y la consecuencia en sus algoritmos. Dar ejemplos de árboles balanceados y no balanceados.
\newpage

\section{Ejercicio 3}

Explique que función/característica tiene que cumplir una función de hash. Determine por qué no es bueno tener como clave de una tabla hash un objeto mutable como una lista. 
\newline
\newline
\textbf{Resolucion}
\newline
\newline
Una funcion de hash es una funcion que nos permite indexar cualquier tipo de datos (no unicamente enteros). Es decir, actua como una funcion de correspondencia entre cualquier tipo de datos y un entero.
\newline
\newline
Luego, no es bueno tener como clave de una tabla de hash un objeto mutable como una lista porque en el peor caso todos los elementos hashean a una misma posicion de la tabla y se insertan en la misma enlazada donde el costo de la busqueda, insercion y borrado pasa a ser $\Theta(n)$ con $n$ la cantidad de elementos a insertar.  
\newpage






